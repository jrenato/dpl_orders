# Generated by Django 5.0.9 on 2024-10-22 12:27

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Customer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_index=True, max_length=120, verbose_name="Name"
                    ),
                ),
                (
                    "company_name",
                    models.CharField(
                        blank=True,
                        max_length=120,
                        null=True,
                        verbose_name="Company Name",
                    ),
                ),
                (
                    "short_name",
                    models.CharField(
                        blank=True, max_length=60, null=True, verbose_name="Short Name"
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        blank=True,
                        help_text="URL-friendly name (auto-generated)",
                        max_length=140,
                        unique=True,
                        verbose_name="Slug",
                    ),
                ),
                (
                    "sheet_label",
                    models.CharField(
                        blank=True, max_length=60, null=True, verbose_name="Sheet Label"
                    ),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Active")),
                (
                    "person_or_company",
                    models.CharField(
                        choices=[("F", "Person"), ("J", "Company")],
                        default="J",
                        max_length=1,
                        verbose_name="Person or Company",
                    ),
                ),
                (
                    "cnpj",
                    models.CharField(
                        blank=True,
                        max_length=18,
                        null=True,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Enter a valid CNPJ in XX.XXX.XXX/XXXX-XX format",
                                regex="^\\d{2}\\.\\d{3}\\.\\d{3}/\\d{4}-\\d{2}$",
                            )
                        ],
                        verbose_name="CNPJ",
                    ),
                ),
                (
                    "cpf",
                    models.CharField(
                        blank=True,
                        max_length=14,
                        null=True,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Enter a valid CPF in XXX.XXX.XXX-XX format",
                                regex="^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$",
                            )
                        ],
                        verbose_name="CPF",
                    ),
                ),
                (
                    "state_registration",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        max_length=20,
                        null=True,
                        verbose_name="State Registration",
                    ),
                ),
                (
                    "municipal_registration",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        null=True,
                        verbose_name="Municipal Registration",
                    ),
                ),
                (
                    "contact_person",
                    models.CharField(
                        blank=True,
                        max_length=120,
                        null=True,
                        verbose_name="Contact Person",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, null=True, verbose_name="Email"
                    ),
                ),
                (
                    "emailnfe",
                    models.EmailField(
                        blank=True, max_length=254, null=True, verbose_name="Email NFe"
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        max_length=15,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Enter a valid phone number",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                        verbose_name="Primary Phone Number",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "updated",
                    models.DateTimeField(auto_now=True, verbose_name="Updated at"),
                ),
                (
                    "vl_id",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Vialogos system ID",
                        max_length=20,
                        null=True,
                        verbose_name="Internal id",
                    ),
                ),
                (
                    "vl_created",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Vialogos Created at"
                    ),
                ),
                (
                    "vl_updated",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Vialogos Updated at"
                    ),
                ),
            ],
            options={
                "verbose_name": "Customer",
                "verbose_name_plural": "Customers",
                "ordering": ["short_name", "name"],
                "indexes": [
                    models.Index(
                        fields=["name", "short_name"],
                        name="customers_c_name_a91536_idx",
                    ),
                    models.Index(
                        fields=["person_or_company", "is_active"],
                        name="customers_c_person__fce14c_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="CustomerAddress",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("street", models.CharField(max_length=120, verbose_name="Street")),
                (
                    "number",
                    models.CharField(
                        blank=True, max_length=10, null=True, verbose_name="Number"
                    ),
                ),
                (
                    "complement",
                    models.CharField(
                        blank=True, max_length=120, null=True, verbose_name="Complement"
                    ),
                ),
                (
                    "district",
                    models.CharField(
                        blank=True, max_length=120, null=True, verbose_name="District"
                    ),
                ),
                (
                    "city",
                    models.CharField(
                        blank=True, max_length=120, null=True, verbose_name="City"
                    ),
                ),
                (
                    "state",
                    models.CharField(
                        blank=True,
                        max_length=2,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Enter a valid state code (e.g., SP)",
                                regex="^[A-Z]{2}$",
                            )
                        ],
                        verbose_name="State",
                    ),
                ),
                (
                    "zip_code",
                    models.CharField(
                        blank=True,
                        max_length=9,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Enter a valid ZIP code in XXXXX-XXX format",
                                regex="^\\d{5}-\\d{3}$",
                            )
                        ],
                        verbose_name="Zip Code",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "updated",
                    models.DateTimeField(auto_now=True, verbose_name="Updated at"),
                ),
                (
                    "customer",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="address",
                        to="customers.customer",
                    ),
                ),
            ],
            options={
                "verbose_name": "Customer Address",
                "verbose_name_plural": "Customer Addresses",
                "indexes": [
                    models.Index(
                        fields=["city", "state"], name="customers_c_city_599272_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="CustomerPhone",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        max_length=15,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Enter a valid phone number",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                        verbose_name="Phone",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        help_text="e.g., Work, Home, Mobile",
                        max_length=50,
                        null=True,
                        verbose_name="Description",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "updated",
                    models.DateTimeField(auto_now=True, verbose_name="Updated at"),
                ),
                (
                    "customer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="phones",
                        to="customers.customer",
                    ),
                ),
            ],
            options={
                "verbose_name": "Customer Phone",
                "verbose_name_plural": "Customer Phones",
                "ordering": ["customer", "phone_number"],
                "unique_together": {("customer", "phone_number")},
            },
        ),
    ]
